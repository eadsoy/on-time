import { data } from "jquery";

const initMapbox = () => {
  const mapElement = document.getElementById("map");
  // Check if a route exists
  let userRoute, userRoutes;
  const routesArr = [];
  if (typeof gon !== "undefined") {
    userRoute = gon.route;
    userRoutes = gon.routes;

    userRoutes.forEach((route) => {
      routesArr.push({
        type: "Feature",
        properties: {
          color: "#F7455D", // red
        },
        geometry: {
          type: "LineString",
          coordinates: route,
        },
      });
    });
  } else {
    userRoute = [];
    userRoutes = [];
  }

  const button = document.getElementById("btn-submit");
  console.log(userRoute);
  console.log(userRoutes);

  if (mapElement) {
    // only build a map if there's a div#map to inject into
    mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;
    const map = new mapboxgl.Map({
      container: "map",
      style: "mapbox://styles/mapbox/light-v10",
    });

    console.log("routesArr:", routesArr);

    // draw routes from db (not dynamic route from mapbox directions)
    map.on("load", function () {
      map.addLayer({
        id: "route",
        type: "line",
        source: {
          type: "geojson",
          data: {
            type: "Feature",
            properties: {},
            geometry: {
              type: "LineString",
              coordinates: userRoute,
            },
          },
        },
        layout: {
          "line-join": "round",
          "line-cap": "round",
        },
        paint: {
          "line-color": "#45286b",
          "line-width": 3,
        },
      });
    });

    var directions = new MapboxDirections({
      accessToken: mapboxgl.accessToken,
      unit: "metric",
      profile: "mapbox/driving",
      alternatives: false,
      geometries: "geojson",
      controls: { instructions: false },
      flyTo: false,
    });
    // add directions control to map
    map.addControl(directions, "top-right");
    map.scrollZoom.enable();

    map.on("load", function () {
      map.addLayer({
        id: "previous-routes",
        type: "line",
        source: {
          type: "geojson",
          data: {
            type: "FeatureCollection",
            properties: {},
            features: routesArr,
          },
        },
        layout: {
          "line-join": "round",
          "line-cap": "round",
        },
        paint: {
          "line-color": "#45111b",
          "line-width": 3,
        },
      });
    });
  }

  // save route to db and draw route on map from db
  const sendLocation = (start, end) => {
    const data = {
      route: {
        start: start,
        end: end,
      },
    };
    fetch("/routes", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        authenticity_token: true,
        Accept: "application/json",
        "X-CSRF-Token": $('meta[name="csrf-token"]').attr("content"),
      },
      body: JSON.stringify(data),
    })
      .then((response) => {
        if (!response.ok) {
          throw "Error";
        }
        return response.json();
        // FIXME Fix this in case route not foound!!
      })
      .then((data) => {
        console.log(data);
      });
  };

  // get start and end points from form input fields
  const inputStart = document.getElementsByTagName("input")[0];
  const inputEnd = document.getElementsByTagName("input")[1];

  let start, end;
  inputStart.addEventListener("change", function () {
    start = this.value;
    console.log(start);
  });

  inputEnd.addEventListener("change", function () {
    end = this.value;
    console.log(end);
  });
  // request on click
  button.addEventListener("click", function () {
    sendLocation(start, end);
  });
};
// gon.start = @route.route.first
// gon.end = @route.route.last
// gon.route = @route.route
// gon.duration = @route.duration
// gon.distance = @route.distance
// };

export { initMapbox };

// adds the route as a layer on the map
// function addRoute (coords) {
// check if the route is already loaded

// }
