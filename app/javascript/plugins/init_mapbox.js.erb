const initMapbox = () => {
  const mapElement = document.getElementById("map");
  const userRoute = gon.route;
  console.log(userRoute);
  if (mapElement) {
    // only build a map if there's a div#map to inject into
    mapboxgl.accessToken = mapElement.dataset.mapboxApiKey;
    const map = new mapboxgl.Map({
      container: "map",
      style: "mapbox://styles/mapbox/light-v10",
    });
    map.on("load", function () {
      map.addLayer({
        id: "route",
        type: "line",
        source: {
          type: "geojson",
          data: {
            type: "Feature",
            properties: {},
            geometry: {
              type: "LineString",
              coordinates: userRoute,
            },
          },
        },
        layout: {
          "line-join": "round",
          "line-cap": "round",
        },
        paint: {
          "line-color": "#45286b",
          "line-width": 1.6,
        },
      });
    });

    var directions = new MapboxDirections({
      accessToken: mapboxgl.accessToken,
      unit: "metric",
      profile: "mapbox/driving",
      alternatives: false,
      geometries: "geojson",
      controls: { instructions: false },
      flyTo: false,
    });

    map.addControl(directions, "top-right");
    map.scrollZoom.enable();
  }

  const fieldOne = document.getElementsByTagName("input")[0];
  const fieldTwo = document.getElementsByTagName("input")[1];

  const sendLocation = (location) => {
    fetch("/routes", {
      method: "POST",
      body: JSON.stringify(location),
    })
      .then((response) => response.json())
      .then((data) => {
        console.log(data);
        alert("sent!");
      });
  };

  fieldOne.addEventListener("change", function () {
    const start = document.getElementsByTagName("input")[0].value;
    // sendLocation(start);
    console.log(start);
  });

  fieldTwo.addEventListener("change", function () {
    const end = document.getElementsByTagName("input")[1].value;
    // sendLocation(end);
    console.log(end);
  });
};
// gon.start = @route.route.first
// gon.end = @route.route.last
// gon.route = @route.route
// gon.duration = @route.duration
// gon.distance = @route.distance
// };

export { initMapbox };

// adds the route as a layer on the map
// function addRoute (coords) {
// check if the route is already loaded

// }
